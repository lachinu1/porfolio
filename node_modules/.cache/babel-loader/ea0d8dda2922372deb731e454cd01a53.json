{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\dev225\\\\Desktop\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';var useContainerDimensions=function useContainerDimensions(myRef){var _useState=useState({width:0}),_useState2=_slicedToArray(_useState,2),dimensions=_useState2[0],setDimensions=_useState2[1];useEffect(function(){var getDimensions=function getDimensions(){return{width:myRef.current.offsetWidth};};var handleResize=function handleResize(){setDimensions(getDimensions());};if(myRef.current){setDimensions(getDimensions());}window.addEventListener('resize',handleResize);return function(){window.removeEventListener('resize',handleResize);};},[myRef]);return dimensions;};export default useContainerDimensions;","map":{"version":3,"sources":["C:/Users/dev225/Desktop/portfolio/src/hooks/useContainerDimesions.js"],"names":["useState","useEffect","useContainerDimensions","myRef","width","dimensions","setDimensions","getDimensions","current","offsetWidth","handleResize","window","addEventListener","removeEventListener"],"mappings":"iKAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,KAAD,CAAW,eACJH,QAAQ,CAAC,CAAEI,KAAK,CAAE,CAAT,CAAD,CADJ,wCACjCC,UADiC,eACrBC,aADqB,eAGxCL,SAAS,CAAC,UAAM,CACd,GAAMM,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAO,CAC3BH,KAAK,CAAED,KAAK,CAACK,OAAN,CAAcC,WADM,CAAP,EAAtB,CAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzBJ,aAAa,CAACC,aAAa,EAAd,CAAb,CACD,CAFD,CAIA,GAAIJ,KAAK,CAACK,OAAV,CAAmB,CACjBF,aAAa,CAACC,aAAa,EAAd,CAAb,CACD,CAEDI,MAAM,CAACC,gBAAP,CAAwB,QAAxB,CAAkCF,YAAlC,EAEA,MAAO,WAAM,CACXC,MAAM,CAACE,mBAAP,CAA2B,QAA3B,CAAqCH,YAArC,EACD,CAFD,CAGD,CAjBQ,CAiBN,CAACP,KAAD,CAjBM,CAAT,CAmBA,MAAOE,CAAAA,UAAP,CACD,CAvBD,CAyBA,cAAeH,CAAAA,sBAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useContainerDimensions = (myRef) => {\n  const [dimensions, setDimensions] = useState({ width: 0 })\n\n  useEffect(() => {\n    const getDimensions = () => ({\n      width: myRef.current.offsetWidth,\n    })\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current) {\n      setDimensions(getDimensions())\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n}\n\nexport default useContainerDimensions\n"]},"metadata":{},"sourceType":"module"}